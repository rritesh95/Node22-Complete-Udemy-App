##Things to keep in Mind####

1. Use environment variables : Avoid hardcoding values in code(like API Keys, Passwords, port Numbers, etc.)
2. Use Production API Keys : Many third party plugin given ifferent API keys for development and production
3. Reduce Error output details : Sensitive error details should not be transmitted to client instead minimal details should be passed, User should not get insight of the code we had written.
4. Set secure response headers : some headers can be response which will never hurt and restrictuser from doing certain things.
5. Add asset compression : doing so will reduce response size, Some files if we send in compressed form, nowadays all modern browsers download it and inzip it on the fly. So performance will be improved by smaller response size hence quicker response.
6. Configure logging : For post deployment support
7. SSL/TLS : Encrypt data in transit, It should be there for security of requests and responses.


Point 5,6 and & generally handled by hosting providers but we can manully do it also.

indeployment to production we can use environment variables instead of hardcoding something in our code.This will help in 2 things one is those values are seggrigated in a file also we need not have to redploy to simply change those values. Making changes in file is enough.

in case of "nodemon" we can define "nodemon.json" in our root folder and define JSON object containing those values. But in production we generally don't use nodemon as we need not have to restart our server that often and we don't change our code that often. In that case we use "Node" tu run application and we can pass environment variables directly in script defined in package.json(didn't worked for me so did it using "dotenv" package)

PORT, Environment are some of the variables which generally gets taken care by hosting providers

To add secure response headers we will use a third party package named "helmet" which will take care of that we just have to install and use it as middleware.

npm install --save helmet

For compression we will use another third part package named 'compression', will find it by just searching 'node-compression', also hosting providers do compression but we are going to build our own server then we can use it.

npm install --save compression

for logging we will use another third-party package named 'morgan'. generally logging is required to log input request and output response to support after deployment support. Hosting providers takes care of that but we can do it manually by using this package

npm install --save morgan

SSL/TLS are implemented to encrypt data in transmission from client to server and server to client. Generally this is achieved by creating and installing SSL certificate which exposes server public key to client which then client passes in requests. Server will be having public key plus private key which it will use to decrypt the data.
Generally hosting provider do that for us. Also we should rely on certificate generating authorities for certificate as the one generated by us won't be understood to browser.
